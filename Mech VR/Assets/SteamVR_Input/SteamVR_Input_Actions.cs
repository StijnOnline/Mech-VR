//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Valve.VR
{
    using System;
    using UnityEngine;
    
    
    public partial class SteamVR_Actions
    {
        
        private static SteamVR_Action_Single p_mech_PullAbility;
        
        private static SteamVR_Action_Boolean p_mech_Shield;
        
        private static SteamVR_Action_Boolean p_mech_PullAbilityConfirm;
        
        private static SteamVR_Action_Pose p_mech_pose;
        
        private static SteamVR_Action_Vibration p_mech_HapticLeft;
        
        private static SteamVR_Action_Vibration p_mech_HapticRight;
        
        public static SteamVR_Action_Single mech_PullAbility
        {
            get
            {
                return SteamVR_Actions.p_mech_PullAbility.GetCopy<SteamVR_Action_Single>();
            }
        }
        
        public static SteamVR_Action_Boolean mech_Shield
        {
            get
            {
                return SteamVR_Actions.p_mech_Shield.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean mech_PullAbilityConfirm
        {
            get
            {
                return SteamVR_Actions.p_mech_PullAbilityConfirm.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Pose mech_pose
        {
            get
            {
                return SteamVR_Actions.p_mech_pose.GetCopy<SteamVR_Action_Pose>();
            }
        }
        
        public static SteamVR_Action_Vibration mech_HapticLeft
        {
            get
            {
                return SteamVR_Actions.p_mech_HapticLeft.GetCopy<SteamVR_Action_Vibration>();
            }
        }
        
        public static SteamVR_Action_Vibration mech_HapticRight
        {
            get
            {
                return SteamVR_Actions.p_mech_HapticRight.GetCopy<SteamVR_Action_Vibration>();
            }
        }
        
        private static void InitializeActionArrays()
        {
            Valve.VR.SteamVR_Input.actions = new Valve.VR.SteamVR_Action[] {
                    SteamVR_Actions.mech_PullAbility,
                    SteamVR_Actions.mech_Shield,
                    SteamVR_Actions.mech_PullAbilityConfirm,
                    SteamVR_Actions.mech_pose,
                    SteamVR_Actions.mech_HapticLeft,
                    SteamVR_Actions.mech_HapticRight};
            Valve.VR.SteamVR_Input.actionsIn = new Valve.VR.ISteamVR_Action_In[] {
                    SteamVR_Actions.mech_PullAbility,
                    SteamVR_Actions.mech_Shield,
                    SteamVR_Actions.mech_PullAbilityConfirm,
                    SteamVR_Actions.mech_pose};
            Valve.VR.SteamVR_Input.actionsOut = new Valve.VR.ISteamVR_Action_Out[] {
                    SteamVR_Actions.mech_HapticLeft,
                    SteamVR_Actions.mech_HapticRight};
            Valve.VR.SteamVR_Input.actionsVibration = new Valve.VR.SteamVR_Action_Vibration[] {
                    SteamVR_Actions.mech_HapticLeft,
                    SteamVR_Actions.mech_HapticRight};
            Valve.VR.SteamVR_Input.actionsPose = new Valve.VR.SteamVR_Action_Pose[] {
                    SteamVR_Actions.mech_pose};
            Valve.VR.SteamVR_Input.actionsBoolean = new Valve.VR.SteamVR_Action_Boolean[] {
                    SteamVR_Actions.mech_Shield,
                    SteamVR_Actions.mech_PullAbilityConfirm};
            Valve.VR.SteamVR_Input.actionsSingle = new Valve.VR.SteamVR_Action_Single[] {
                    SteamVR_Actions.mech_PullAbility};
            Valve.VR.SteamVR_Input.actionsVector2 = new Valve.VR.SteamVR_Action_Vector2[0];
            Valve.VR.SteamVR_Input.actionsVector3 = new Valve.VR.SteamVR_Action_Vector3[0];
            Valve.VR.SteamVR_Input.actionsSkeleton = new Valve.VR.SteamVR_Action_Skeleton[0];
            Valve.VR.SteamVR_Input.actionsNonPoseNonSkeletonIn = new Valve.VR.ISteamVR_Action_In[] {
                    SteamVR_Actions.mech_PullAbility,
                    SteamVR_Actions.mech_Shield,
                    SteamVR_Actions.mech_PullAbilityConfirm};
        }
        
        private static void PreInitActions()
        {
            SteamVR_Actions.p_mech_PullAbility = ((SteamVR_Action_Single)(SteamVR_Action.Create<SteamVR_Action_Single>("/actions/Mech/in/PullAbility")));
            SteamVR_Actions.p_mech_Shield = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/Mech/in/Shield")));
            SteamVR_Actions.p_mech_PullAbilityConfirm = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/Mech/in/PullAbilityConfirm")));
            SteamVR_Actions.p_mech_pose = ((SteamVR_Action_Pose)(SteamVR_Action.Create<SteamVR_Action_Pose>("/actions/Mech/in/pose")));
            SteamVR_Actions.p_mech_HapticLeft = ((SteamVR_Action_Vibration)(SteamVR_Action.Create<SteamVR_Action_Vibration>("/actions/Mech/out/HapticLeft")));
            SteamVR_Actions.p_mech_HapticRight = ((SteamVR_Action_Vibration)(SteamVR_Action.Create<SteamVR_Action_Vibration>("/actions/Mech/out/HapticRight")));
        }
    }
}
